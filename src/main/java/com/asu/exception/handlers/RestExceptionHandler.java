package com.asu.exception.handlers;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import lombok.extern.slf4j.Slf4j;

/**
 * 
 * @author ashutosh
 * @ExceptionHandler and @ControllerAdvice,
 * we’ll be able to define a central  point for treating exceptions 
 * generated by this application and wrapping them up in an ApiError 
 * object with better organization than the default Spring Boot error
 * handling mechanism. We’ll be extending Spring boot's
 * ResponseEntityExceptionHandler as it already provides some
 * basic handling of Spring MVC exceptions, so we’ll be adding
 * handlers for new exceptions while improving the existing ones.
 */
@RestControllerAdvice
@Slf4j
public class RestExceptionHandler extends ResponseEntityExceptionHandler {

	/**
	 * Overriding Exceptions that are Handled In ResponseEntityExceptionHandler
	 * using our custom error message HERE ApiError is our own a class for
	 * representing API errors. We’ll be creating a class called ApiError that has
	 * enough fields to hold relevant information about errors that happen during
	 * REST calls.
	 */
	@Override
	protected ResponseEntity<Object> handleHttpMessageNotReadable(HttpMessageNotReadableException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) {
		String error = "Malformed JSON request";
		return buildResponseEntity(new ApiError(HttpStatus.BAD_REQUEST, error, ex));
	}

	private ResponseEntity<Object> buildResponseEntity(ApiError apiError) {
		return new ResponseEntity<>(apiError, apiError.getStatus());
	}

	/**
	 * method annotated with @ExceptionHandler is used to generate Exception message 
	 * in our own format
	 */
	@ExceptionHandler(EntityNotFoundException.class)
	protected ResponseEntity<Object> handleEntityNotFound(EntityNotFoundException ex) {
		ApiError apiError = new ApiError(HttpStatus.NOT_FOUND);
		apiError.setMessage(ex.getMessage());
		// apiError.setDebugMessage(ex.getStackTrace().toString());
		return buildResponseEntity(apiError);
	}

}
